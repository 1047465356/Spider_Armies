{"state":1,"message":"操作成功",

"content":
{"id":1673,"courseId":46,"sectionId":395,

"theme":"第12讲：Ajax 的原理和解析"

,"isFree":false,"publishDate":"2020/03/23","videoMedia":{"id":1575,"channel":1,"mediaType":1,"fileId":"6c67085655bf47babceb3ca54957bf65","fileUrl":null,"duration":"10:43","fileSize":176.0,"durationNum":643},"audioMedia":{"id":1573,"channel":1,"mediaType":0,"fileId":"c0230c69afda4ba8a2658efa46ec71cf","fileUrl":"https://vod.lagou.com/c0230c69afda4ba8a2658efa46ec71cf/6068c6dd105d4d8199b788c27475aa13-sq-encrypt-stream.m3u8","duration":"10:43","fileSize":6.23,"durationNum":643},

"teacherDTOList":[
    {"id":47,
    "teacherName":"崔庆才",
    "position":"《Python3 网络爬虫开发实战》作者",
    "teacherHeadPicUrl":"https://s0.lgstatic.com/i/image3/M01/6B/1B/Cgq2xl5XI8eAWCdOAAAcS_aYpyc395.jpg",
    "description":"<p><span data-shimo-docs=\"[[20,&quot;崔庆才，豆瓣评分8.9分的超级畅销书《Python3 网络爬虫开发实战》作者， 7w+ 爬虫工程师的入门书籍。在微软就职期间，曾担任爬虫工程师一职，为公司爬取亿级别的数据。\\n\\n从2015年开始钻研爬虫技术，并在博客上记录和分享爬虫心得，访问量已过千万。技术组织 NightTeam 成员；主要研究网络爬虫、Web 开发、机器学习方向。\\n\\n&quot;]]\"></span></p><p line=\"YoiN\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">豆瓣评分8.9分的超级畅销书《Python3 网络爬虫开发实战》作者， 7w+ 爬虫工程师的入门书籍。曾担任知名互联网公司爬虫工程师一职，为公司爬取亿级别的数据。</span></p><p line=\"3ofv\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">&nbsp;</span></p><p line=\"s1kS\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">从2015年开始钻研爬虫技术，并在博客上记录和分享爬虫心得，访问量已过千万。技术组织 NightTeam 成员；主要研究网络爬虫、Web 开发、机器学习方向。</span></p><p line=\"3vDR\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">&nbsp;</span></p><p><br/></p>"}
                ],
    "textContent":"<p>当我们在用 requests 抓取页面的时候，得到的结果可能会和在浏览器中看到的不一样：在浏览器中正常显示的页面数据，使用 requests 却没有得到结果。这是因为 requests 获取的都是原始 HTML 文档，而浏览器中的页面则是经过 JavaScript 数据处理后生成的结果。这些数据的来源有多种，可能是通过 Ajax 加载的，可能是包含在 HTML 文档中的，也可能是经过 JavaScript 和特定算法计算后生成的。</p>\n<p>对于第 1 种情况，数据加载是一种异步加载方式，原始页面不会包含某些数据，只有在加载完后，才会向服务器请求某个接口获取数据，然后数据才被处理从而呈现到网页上，这个过程实际上就是向服务器接口发送了一个 Ajax 请求。</p>\n<p>按照 Web 的发展趋势来看，这种形式的页面将会越来越多。网页的原始 HTML 文档不会包含任何数据，数据都是通过 Ajax 统一加载后再呈现出来的，这样在 Web 开发上可以做到前后端分离，并且降低服务器直接渲染页面带来的压力。</p>\n<p>所以如果你遇到这样的页面，直接利用 requests 等库来抓取原始页面，是无法获取有效数据的。这时我们需要分析网页后台向接口发送的 Ajax 请求，如果可以用 requests 来模拟 Ajax 请求，就可以成功抓取了。</p>\n<p>所以，本课时我们就来了解什么是 Ajax 以及如何去分析和抓取 Ajax 请求。</p>\n<h3>什么是 Ajax</h3>\n<p>Ajax，全称为 Asynchronous JavaScript and XML，即异步的 JavaScript 和 XML。它不是一门编程语言，而是利用 JavaScript 在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页的技术。</p>\n<p>传统的网页，如果你想更新其内容，那么必须要刷新整个页面。有了 Ajax，便可以在页面不被全部刷新的情况下更新其内容。在这个过程中，页面实际上在后台与服务器进行了数据交互，获取到数据之后，再利用 JavaScript 改变网页，这样网页内容就会更新了。</p>\n<p>你可以到 W3School 上体验几个 Demo 来感受一下：<a href=\"http://www.w3school.com.cn/ajax/ajax_xmlhttprequest_send.asp\">http://www.w3school.com.cn/ajax/ajax_xmlhttprequest_send.asp</a>。</p>\n<h3>实例引入</h3>\n<p>浏览网页的时候，我们会发现很多网页都有下滑查看更多的选项。以我微博的主页为例：<a href=\"https://m.weibo.cn/u/2830678474\">https://m.weibo.cn/u/2830678474</a>。我们切换到微博页面，发现下滑几个微博后，后面的内容不会直接显示，而是会出现一个加载动画，加载完成后下方才会继续出现新的微博内容，这个过程其实就是 Ajax 加载的过程，如图所示：</p>\n<p><img src=\"https://s0.lgstatic.com/i/image3/M01/79/DC/CgpOIF54UF2AMNEcAACYMMK9jgk319.png\" alt=\"\"></p>\n<p>我们注意到页面其实并没有整个刷新，这意味着页面的链接没有变化，但是网页中却多了新内容，也就是后面刷出来的新微博。这就是通过 Ajax 获取新数据并呈现的过程。</p>\n<h3>基本原理</h3>\n<p>初步了解了 Ajax 之后，我们再来详细了解它的基本原理。发送 Ajax 请求到网页更新的过程可以简单分为以下 3 步：</p>\n<ul>\n<li>发送请求</li>\n<li>解析内容</li>\n<li>渲染网页</li>\n</ul>\n<p>下面我们分别详细介绍一下这几个过程。</p>\n<h3>发送请求</h3>\n<p>我们知道 JavaScript 可以实现页面的各种交互功能，Ajax 也不例外，它是由 JavaScript 实现的，实际上执行了如下代码：</p>\n<pre><code data-language=\"js\" class=\"lang-js\"><span class=\"hljs-keyword\">var</span> xmlhttp;\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>.XMLHttpRequest) {\n    <span class=\"hljs-comment\">//code for IE7+, Firefox, Chrome, Opera, Safari</span>\n    xmlhttp=<span class=\"hljs-keyword\">new</span> XMLHttpRequest();} <span class=\"hljs-keyword\">else</span> {<span class=\"hljs-comment\">//code for IE6, IE5</span>\n    xmlhttp=<span class=\"hljs-keyword\">new</span> ActiveXObject(<span class=\"hljs-string\">\"Microsoft.XMLHTTP\"</span>);\n}\nxmlhttp.onreadystatechange=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">if</span> (xmlhttp.readyState==<span class=\"hljs-number\">4</span> &amp;&amp; xmlhttp.status==<span class=\"hljs-number\">200</span>) {<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"myDiv\"</span>).innerHTML=xmlhttp.responseText;\n    }\n}\nxmlhttp.open(<span class=\"hljs-string\">\"POST\"</span>,<span class=\"hljs-string\">\"/ajax/\"</span>,<span class=\"hljs-literal\">true</span>);\nxmlhttp.send();\n</code></pre>\n<p>这是 JavaScript 对 Ajax 最底层的实现，这个过程实际上是新建了 XMLHttpRequest 对象，然后调用 onreadystatechange 属性设置监听，最后调用 open() 和 send() 方法向某个链接（也就是服务器）发送请求。</p>\n<p>前面我们用 Python 实现请求发送之后，可以得到响应结果，但这里请求的发送由 JavaScript 来完成。由于设置了监听，所以当服务器返回响应时，onreadystatechange 对应的方法便会被触发，我们在这个方法里面解析响应内容即可。</p>\n<h4>解析内容</h4>\n<p>得到响应之后，onreadystatechange 属性对应的方法会被触发，此时利用 xmlhttp 的 responseText 属性便可取到响应内容。这类似于 Python 中利用 requests 向服务器发起请求，然后得到响应的过程。</p>\n<p>返回的内容可能是 HTML，也可能是 JSON，接下来我们只需要在方法中用 JavaScript 进一步处理即可。比如，如果返回的内容是 JSON 的话，我们便可以对它进行解析和转化。</p>\n<h4>渲染网页</h4>\n<p>JavaScript 有改变网页内容的能力，解析完响应内容之后，就可以调用 JavaScript 针对解析完的内容对网页进行下一步处理。比如，通过 document.getElementById().innerHTML 这样的操作，对某个元素内的源代码进行更改，这样网页显示的内容就改变了，这种对 Document 网页文档进行如更改、删除等操作也被称作 DOM 操作。</p>\n<p>上例中，document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText这个操作便将 ID 为 myDiv 的节点内部的 HTML 代码更改为服务器返回的内容，这样 myDiv 元素内部便会呈现出服务器返回的新数据，网页的部分内容看上去就更新了。</p>\n<p>可以看到，发送请求、解析内容和渲染网页这 3 个步骤其实都是由 JavaScript 完成的。</p>\n<p>我们再回想微博的下拉刷新，这其实是 JavaScript 向服务器发送了一个 Ajax 请求，然后获取新的微博数据，将其解析，并将其渲染在网页中的过程。</p>\n<p>因此，真实的数据其实都是通过一次次 Ajax 请求得到的，如果想要抓取这些数据，我们需要知道这些请求到底是怎么发送的，发往哪里，发了哪些参数。如果我们知道了这些，不就可以用 Python 模拟这个发送操作，获取到其中的结果了吗？</p>\n<h3>Ajax 分析</h3>\n<p>这里还是以前面的微博为例，我们知道拖动刷新的内容由 Ajax 加载，而且页面的 URL 没有变化，这时我们应该到哪里去查看这些 Ajax 请求呢？</p>\n<p>这里还需要借助浏览器的开发者工具，下面以 Chrome 浏览器为例来介绍。</p>\n<p>首先，用 Chrome 浏览器打开微博链接&nbsp;<a href=\"https://m.weibo.cn/u/2830678474\">https://m.weibo.cn/u/2830678474</a>，随后在页面中点击鼠标右键，从弹出的快捷菜单中选择“检查” 选项，此时便会弹出开发者工具，如图所示：</p>\n<p><img src=\"https://s0.lgstatic.com/i/image3/M01/79/DC/Cgq2xl54UF6ASQetAAP8yHnhg-A801.png\" alt=\"\"></p>\n<p>前面也提到过，这里就是页面加载过程中浏览器与服务器之间发送请求和接收响应的所有记录。</p>\n<p>Ajax 有其特殊的请求类型，它叫作 xhr。在图中我们可以发现一个以 getIndex 开头的请求，其 Type 为 xhr，这就是一个 Ajax 请求。用鼠标点击这个请求，可以查看这个请求的详细信息。</p>\n<p><img src=\"https://s0.lgstatic.com/i/image3/M01/79/DC/CgpOIF54UF6AN8guAAbrzO2HTj8622.png\" alt=\"\"></p>\n<p>在右侧可以观察到 Request Headers、URL 和 Response Headers 等信息。Request Headers 中有一个信息为 X-Requested-With:XMLHttpRequest，这就标记了此请求是 Ajax 请求，如图所示：</p>\n<p><img src=\"https://s0.lgstatic.com/i/image3/M01/00/C6/Ciqah154UF6AG4amAAKPalYmb5k222.png\" alt=\"\"></p>\n<p>随后我们点击 Preview，即可看到响应的内容，它是 JSON 格式的。这里 Chrome 为我们自动做了解析，点击箭头即可展开和收起相应内容。</p>\n<p>我们可以观察到，返回结果是我的个人信息，包括昵称、简介、头像等，这也是用来渲染个人主页所使用的数据。JavaScript 接收到这些数据之后，再执行相应的渲染方法，整个页面就渲染出来了。</p>\n<p><img src=\"https://s0.lgstatic.com/i/image3/M01/79/DC/Cgq2xl54UF6AEs-HAAMmqovudJc203.png\" alt=\"\"></p>\n<p>另外，我们也可以切换到 Response 选项卡，从中观察到真实的返回数据，如图所示：</p>\n<p><img src=\"https://s0.lgstatic.com/i/image3/M01/79/DC/CgpOIF54UF6AbF8YAABZ6_r-H8Q421.png\" alt=\"\"></p>\n<p>接下来，切回到第一个请求，观察一下它的 Response 是什么，如图所示：</p>\n<p><img src=\"https://s0.lgstatic.com/i/image3/M01/00/C6/Ciqah154UF-ALTcXAAgUk5WaJmM244.png\" alt=\"\"></p>\n<p>这就是最原始链接&nbsp;<a href=\"https://m.weibo.cn/u/2830678474\">https://m.weibo.cn/u/2830678474</a>&nbsp;返回的结果，其代码只有不到 50 行，结构也非常简单，只是执行了一些 JavaScript。</p>\n<p>所以说，我们看到的微博页面的真实数据并不是最原始的页面返回的，而是在执行 JavaScript 后再次向后台发送 Ajax 请求，浏览器拿到数据后进一步渲染出来的。</p>\n<h3>过滤请求</h3>\n<p>接下来，我们再利用 Chrome 开发者工具的筛选功能筛选出所有的 Ajax 请求。在请求的上方有一层筛选栏，直接点击 XHR，此时在下方显示的所有请求便都是 Ajax 请求了，如图所示：</p>\n<p><img src=\"https://s0.lgstatic.com/i/image3/M01/79/DC/Cgq2xl54UF-AMKo-AAXlNO948BY860.png\" alt=\"\"></p>\n<p>接下来，不断滑动页面，可以看到页面底部有一条条新的微博被刷出，而开发者工具下方也不断地出现 Ajax 请求，这样我们就可以捕获到所有的 Ajax 请求了。</p>\n<p>随意点开一个条目，都可以清楚地看到其 Request URL、Request Headers、Response Headers、Response Body 等内容，此时想要模拟请求和提取就非常简单了。</p>\n<p>下图所示的内容便是我某一页微博的列表信息：</p>\n<p><img src=\"https://s0.lgstatic.com/i/image3/M01/79/DC/CgpOIF54UF-AcIlMAAoXZXGIcTE140.png\" alt=\"\"></p>\n<p>到现在为止，我们已经可以分析出 Ajax 请求的一些详细信息了，接下来只需要用程序模拟这些 Ajax 请求，就可以轻松提取我们所需要的信息了。</p>","status":"RELEASE"},"uiMessage":null}